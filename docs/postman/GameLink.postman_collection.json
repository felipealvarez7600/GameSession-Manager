{
	"info": {
		"_postman_id": "3c3959c3-9aa5-4f33-bf04-c0ea21e73142",
		"name": "GameLink",
		"description": "Our GameLink API was made with the intent of facilitating the common problem that many game developers suffer when it comes to their online functionalities, sessions making.\\\nWith our service a developer only needs to register its game within a genre and implement the API described bellow to automatically create sessions for your players, or give them the ability to search their own.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19531167"
	},
	"item": [
		{
			"name": "players",
			"item": [
				{
					"name": "{playerId}",
					"item": [
						{
							"name": "invites",
							"item": [
								{
									"name": "Retrive a given player's invites",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response is an object with propety data that is an array of objects with session and fromPlayer property\", function () {\r",
													"    var responseObject = pm.response.json();\r",
													"    pm.expect(responseObject).to.be.an('object');\r",
													"    pm.expect(responseObject.data).to.be.an('array')\r",
													"    responseObject.data.forEach((info) => {\r",
													"        pm.expect(info).to.have.property('session');\r",
													"        pm.expect(info).to.have.property('fromPlayer');\r",
													"        let session = info.session\r",
													"        \r",
													"        pm.expect(session).to.have.property('id')\r",
													"        pm.expect(session).to.have.property('capacity')\r",
													"        pm.expect(session).to.have.property('date')\r",
													"        pm.expect(session).to.have.property('gameId')\r",
													"        pm.expect(session).to.have.property('playersId')\r",
													"        pm.expect(session).to.have.property('state')\r",
													"        pm.expect(session).to.have.property('gameName')\r",
													"        let fromPlayer = info.fromPlayer\r",
													"        pm.expect(fromPlayer).to.have.property('id')\r",
													"        pm.expect(fromPlayer).to.have.property('name')\r",
													"        pm.expect(fromPlayer).to.have.property('email')\r",
													"    })\r",
													"})"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token1}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/players/:playerId/invites",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												":playerId",
												"invites"
											],
											"variable": [
												{
													"key": "playerId",
													"value": "{{id2}}",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "Invites Details",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/players/:playerId/invites",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"players",
														":playerId",
														"invites"
													],
													"variable": [
														{
															"key": "playerId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"session\": {\n    \"sessionId\": \"<string>\",\n    \"capacity\": \"<integer>\",\n    \"gameId\": \"<string>\",\n    \"date\": \"<dateTime>\",\n    \"playerIds\": [\n      \"<integer>\",\n      \"<integer>\"\n    ],\n    \"state\": \"OPEN\",\n    \"gameName\": \"<string>\"\n  },\n  \"player\": {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"email\": \"<string>\",\n    \"details\": \"<string>\",\n    \"image\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  }\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get the details of a player",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/players/:playerId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"players",
										":playerId"
									],
									"variable": [
										{
											"key": "playerId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Player details",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/players/:playerId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												":playerId"
											],
											"variable": [
												{
													"key": "playerId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"email\": \"<string>\",\n  \"details\": \"<string>\",\n  \"image\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}"
								}
							]
						},
						{
							"name": "Updates user profile",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"details\": \"<string>\",\n  \"image\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/players/:playerId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"players",
										":playerId"
									],
									"variable": [
										{
											"key": "playerId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								},
								"description": "Updates user profile"
							},
							"response": [
								{
									"name": "Successfully updated user profile",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"details\": \"<string>\",\n  \"image\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/players/:playerId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												":playerId"
											],
											"variable": [
												{
													"key": "playerId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "logout",
					"item": [
						{
							"name": "Logs out and deletes the player's session token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"     pm.expect(pm.response.code).to.equal(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token1}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/players/logout?playerId={{id1}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"players",
										"logout"
									],
									"query": [
										{
											"key": "playerId",
											"value": "{{id1}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "Successfully logged out player and deleted token",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/players/logout?playerId=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"players",
												"logout"
											],
											"query": [
												{
													"key": "playerId",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Create a new player",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomName() {\r",
									"  const firstNames = [\r",
									"    'John', 'Jane', 'Doe', 'Smith', 'Emily', 'James', 'Brown',\r",
									"    'Oliver', 'Sophia', 'Taylor', 'Noah', 'Madison', 'Liam', 'Chloe'\r",
									"  ];\r",
									"  const lastNames = [\r",
									"    'Johnson', 'Williams', 'Jones', 'Brown', 'Davis', 'Miller',\r",
									"    'Wilson', 'Anderson', 'Thomas', 'Jackson', 'White', 'Moore',\r",
									"    'Martin', 'Lee'\r",
									"  ];\r",
									"  const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"  const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									"  return `${firstName}${lastName}`;\r",
									"}\r",
									"\r",
									"function generateRandomPassword(length) {\r",
									"  const charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%^&*()_+~`|}{[]\\:;?><,./-=';\r",
									"  let password = '';\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * charset.length);\r",
									"    password += charset[randomIndex];\r",
									"  }\r",
									"  return password;\r",
									"}\r",
									"name = generateRandomName()\r",
									"email = `${name}@email.com`\r",
									"pm.collectionVariables.set(\"name1\", name);\r",
									"pm.collectionVariables.set(\"email1\", email);\r",
									"pm.collectionVariables.set(\"psswd1\", generateRandomPassword(8));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"let responseJSON = pm.response.json();\r",
									"pm.test(\"Response is an object with token and playerId properties\", function () {\r",
									"    pm.expect(responseJSON).to.be.an('object');\r",
									"    pm.expect(responseJSON).to.have.property('token');\r",
									"    pm.expect(responseJSON).to.have.property('playerId');\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"id1\", `${responseJSON.playerId}`);\r",
									"pm.collectionVariables.set(\"token1\", `${responseJSON.token}`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{name1}}\",\n  \"email\": \"{{email1}}\",\n  \"password\": \"{{psswd1}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/players?limit=10&skip=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"players"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "skip",
									"value": "0"
								}
							]
						}
					},
					"response": [
						{
							"name": "Player created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"<string>\",\n  \"email\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/players",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"players"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"token\": \"<string>\",\n  \"playerId\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Get a list of the players",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with a data property wich contains an array of player items comprised of id, name, email, details, image and password\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"    pm.expect(pm.response.json().data).to.be.an('array');\r",
									"    pm.response.json().data.forEach((player) => {\r",
									"     pm.expect(player).to.have.property('id');\r",
									"     pm.expect(player).to.have.property('name');\r",
									"     pm.expect(player).to.have.property('email');\r",
									"     pm.expect(player).to.have.property('password');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/players?limit=10&skip=0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"players"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "skip",
									"value": "0"
								}
							]
						}
					},
					"response": [
						{
							"name": "Players Details",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/players?limit=<integer>&skip=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"players"
									],
									"query": [
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": [\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"email\": \"<string>\",\n      \"details\": \"<string>\",\n      \"image\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    },\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"email\": \"<string>\",\n      \"details\": \"<string>\",\n      \"image\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    }\n  ]\n}"
						}
					]
				}
			]
		},
		{
			"name": "authenticate",
			"item": [
				{
					"name": "Login an existing player",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"let responseJSON = pm.response.json();\r",
									"pm.test(\"Response is an object with token and playerId properties\", function () {\r",
									"    pm.expect(responseJSON).to.be.an('object');\r",
									"    pm.expect(responseJSON).to.have.property('token');\r",
									"    pm.expect(responseJSON).to.have.property('playerId');\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"id1\", `${responseJSON.playerId}`);\r",
									"pm.collectionVariables.set(\"token1\", `${responseJSON.token}`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/authenticate?name={{name1}}&password={{psswd1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"authenticate"
							],
							"query": [
								{
									"key": "name",
									"value": "{{name1}}",
									"description": "(Required) "
								},
								{
									"key": "password",
									"value": "{{psswd1}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "Player logged in",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/authenticate?email=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"authenticate"
									],
									"query": [
										{
											"key": "email",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"token\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "authenticated",
			"item": [
				{
					"name": "Get id of player of a given token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200\", function () {\r",
									"     pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"let responseJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"Response is object with id property\", function () {\r",
									"    pm.expect(responseJSON).to.be.an('object');\r",
									"    pm.expect(responseJSON).to.have.property('id');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token1}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/authenticated",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"authenticated"
							]
						}
					},
					"response": [
						{
							"name": "Return id of player",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/authenticated?email=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"authenticated"
									],
									"query": [
										{
											"key": "email",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "games",
			"item": [
				{
					"name": "partial",
					"item": [
						{
							"name": "Retrieve all the games with corresponding partial name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is object with data propertie with an array of objects with id, name, developer and genres property\", function () {\r",
											"     pm.expect(pm.response.json()).to.be.an('object');\r",
											"     pm.expect(pm.response.json().data).to.be.an('array');\r",
											"\r",
											"     pm.response.json().data.forEach((game) => {\r",
											"            pm.expect(game).to.have.property('id');\r",
											"            pm.expect(game).to.have.property('name');\r",
											"            pm.expect(game).to.have.property('developer');\r",
											"            pm.expect(game).to.have.property('genres');\r",
											"     });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token1}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/games/partial?gameName=Destiny&limit=0&skip=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"games",
										"partial"
									],
									"query": [
										{
											"key": "gameName",
											"value": "Destiny"
										},
										{
											"key": "limit",
											"value": "0"
										},
										{
											"key": "skip",
											"value": "10"
										}
									]
								},
								"description": "Retrieve all the games with corresponding partial name"
							},
							"response": [
								{
									"name": "List of game details matching partial name",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/games/partial?gameName=<string>&limit=<integer>&skip=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"games",
												"partial"
											],
											"query": [
												{
													"key": "gameName",
													"value": "<string>"
												},
												{
													"key": "limit",
													"value": "<integer>"
												},
												{
													"key": "skip",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": [\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"developer\": \"<string>\",\n      \"genres\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    },\n    {\n      \"id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"developer\": \"<string>\",\n      \"genres\": [\n        \"<string>\",\n        \"<string>\"\n      ]\n    }\n  ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "{gameId}",
					"item": [
						{
							"name": "Get the details of a game",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"     pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is object with id, name, developer and genres properties\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"    pm.expect(pm.response.json()).to.have.property('id');\r",
											"    pm.expect(pm.response.json()).to.have.property('name');\r",
											"    pm.expect(pm.response.json()).to.have.property('developer');\r",
											"    pm.expect(pm.response.json()).to.have.property('genres');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token1}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/games/:gameId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"games",
										":gameId"
									],
									"variable": [
										{
											"key": "gameId",
											"value": "{{gameId}}",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Game details",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/games/:gameId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"games",
												":gameId"
											],
											"variable": [
												{
													"key": "gameId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"developer\": \"<string>\",\n  \"genres\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "Get a list of games",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is object with data propertie with an array of objects with id, name, developer and genres property\", function () {\r",
									"     pm.expect(pm.response.json()).to.be.an('object');\r",
									"     pm.expect(pm.response.json().data).to.be.an('array');\r",
									"\r",
									"     pm.response.json().data.forEach((game) => {\r",
									"            pm.expect(game).to.have.property('id');\r",
									"            pm.expect(game).to.have.property('name');\r",
									"            pm.expect(game).to.have.property('developer');\r",
									"            pm.expect(game).to.have.property('genres');\r",
									"     });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token1}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/games?limit=10&skip=0&genres=FPS,MMO&developer=Bungie",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"games"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "genres",
									"value": "FPS,MMO"
								},
								{
									"key": "developer",
									"value": "Bungie"
								}
							]
						}
					},
					"response": [
						{
							"name": "List of games",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/games?limit=<integer>&skip=<integer>&genres=<string>&developer=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"games"
									],
									"query": [
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "genres",
											"value": "<string>"
										},
										{
											"key": "developer",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"developer\": \"<string>\",\n    \"genres\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  },\n  {\n    \"id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"developer\": \"<string>\",\n    \"genres\": [\n      \"<string>\",\n      \"<string>\"\n    ]\n  }\n]"
						}
					]
				},
				{
					"name": "Create a new game",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomName() {\r",
									"  const firstNames = [\r",
									"    'John', 'Jane', 'Doe', 'Smith', 'Emily', 'James', 'Brown',\r",
									"    'Oliver', 'Sophia', 'Taylor', 'Noah', 'Madison', 'Liam', 'Chloe'\r",
									"  ];\r",
									"  const lastNames = [\r",
									"    'Johnson', 'Williams', 'Jones', 'Brown', 'Davis', 'Miller',\r",
									"    'Wilson', 'Anderson', 'Thomas', 'Jackson', 'White', 'Moore',\r",
									"    'Martin', 'Lee'\r",
									"  ];\r",
									"  const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"  const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									"  return `${firstName}${lastName}`;\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"gameName\", `Destiny ${generateRandomName()}`);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"var responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"Response is object with gameId property\", function () {\r",
									"     pm.expect(responseData).to.be.an('object');\r",
									"     pm.expect(responseData.gameId).to.exist;\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"gameId\", `${responseData.gameId}`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token1}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{gameName}}\",\n  \"developer\": \"Bungie\",\n  \"genres\": [\n    \"FPS\",\n    \"MMO\"\n  ]\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/games",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"games"
							]
						}
					},
					"response": [
						{
							"name": "Game created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"<string>\",\n  \"developer\": \"<string>\",\n  \"genres\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/games",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"games"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"gameId\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "developers",
			"item": [
				{
					"name": "Get all registered developers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is object with data property with an array of strings\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.response.json().data.forEach((name) => {\r",
									"            pm.expect(name).to.be.string\r",
									"     });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/developers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"developers"
							]
						}
					},
					"response": [
						{
							"name": "Game details",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/developers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"developers"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}"
						}
					]
				}
			]
		},
		{
			"name": "genres",
			"item": [
				{
					"name": "Get all registered genres",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is object with data property with an array of strings\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.response.json().data.forEach((name) => {\r",
									"            pm.expect(name).to.be.string\r",
									"     });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/genres",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"genres"
							]
						}
					},
					"response": [
						{
							"name": "Game details",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/genres",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"genres"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}"
						}
					]
				}
			]
		},
		{
			"name": "sessions",
			"item": [
				{
					"name": "{sessionId}",
					"item": [
						{
							"name": "players",
							"item": [
								{
									"name": "{playerId}",
									"item": [
										{
											"name": "Add a player to an existing session",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Response is object with id, capacity, date, gameId, playersId and state properties\", function () {\r",
															"    var responseObject = pm.response.json();\r",
															"    pm.expect(responseObject).to.be.an('object');\r",
															"    pm.expect(responseObject).to.have.property('id');\r",
															"    pm.expect(responseObject).to.have.property('capacity');\r",
															"    pm.expect(responseObject).to.have.property('date');\r",
															"    pm.expect(responseObject).to.have.property('gameId');\r",
															"    pm.expect(responseObject).to.have.property('playersId');\r",
															"    pm.expect(responseObject).to.have.property('state');\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token1}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/sessions/:sessionId/players/:playerId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sessions",
														":sessionId",
														"players",
														":playerId"
													],
													"variable": [
														{
															"key": "sessionId",
															"value": "{{sessionId}}",
															"description": "(Required) "
														},
														{
															"key": "playerId",
															"value": "{{id1}}"
														}
													]
												}
											},
											"response": [
												{
													"name": "Successfully added a player",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"description": "Added as a part of security scheme: bearer",
																"key": "Authorization",
																"value": "Bearer <token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/sessions/:sessionId/players/:playerId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sessions",
																":sessionId",
																"players",
																":playerId"
															],
															"variable": [
																{
																	"key": "sessionId"
																},
																{
																	"key": "playerId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"sessionId\": \"<string>\",\n  \"capacity\": \"<integer>\",\n  \"gameId\": \"<string>\",\n  \"date\": \"<dateTime>\",\n  \"playerIds\": [\n    \"<integer>\",\n    \"<integer>\"\n  ],\n  \"state\": \"CLOSED\",\n  \"gameName\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "Remove a player from an existing session",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{token1}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/sessions/:sessionId/players/:playerId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sessions",
														":sessionId",
														"players",
														":playerId"
													],
													"variable": [
														{
															"key": "sessionId",
															"value": "{{sessionId}}",
															"description": "(Required) "
														},
														{
															"key": "playerId",
															"value": "{{id1}}"
														}
													]
												}
											},
											"response": [
												{
													"name": "Successfully removed a player",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: bearer",
																"key": "Authorization",
																"value": "Bearer <token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/sessions/:sessionId/players/:playerId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sessions",
																":sessionId",
																"players",
																":playerId"
															],
															"variable": [
																{
																	"key": "sessionId"
																},
																{
																	"key": "playerId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												},
												{
													"name": "Player or Session not found",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: bearer",
																"key": "Authorization",
																"value": "Bearer <token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/sessions/:sessionId/players/:playerId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"sessions",
																":sessionId",
																"players",
																":playerId"
															],
															"variable": [
																{
																	"key": "sessionId"
																},
																{
																	"key": "playerId"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										}
									]
								},
								{
									"name": "{fromPlayerId}",
									"item": [
										{
											"name": "invite",
											"item": [
												{
													"name": "{toPlayerId}",
													"item": [
														{
															"name": "Send an invitation to a player from a player to a given session",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"function generateRandomName() {\r",
																			"  const firstNames = [\r",
																			"    'John', 'Jane', 'Doe', 'Smith', 'Emily', 'James', 'Brown',\r",
																			"    'Oliver', 'Sophia', 'Taylor', 'Noah', 'Madison', 'Liam', 'Chloe'\r",
																			"  ];\r",
																			"  const lastNames = [\r",
																			"    'Johnson', 'Williams', 'Jones', 'Brown', 'Davis', 'Miller',\r",
																			"    'Wilson', 'Anderson', 'Thomas', 'Jackson', 'White', 'Moore',\r",
																			"    'Martin', 'Lee'\r",
																			"  ];\r",
																			"  const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
																			"  const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
																			"  return `${firstName}${lastName}`;\r",
																			"}\r",
																			"\r",
																			"function generateRandomPassword(length) {\r",
																			"  const charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%^&*()_+~`|}{[]\\:;?><,./-=';\r",
																			"  let password = '';\r",
																			"  for (let i = 0; i < length; i++) {\r",
																			"    const randomIndex = Math.floor(Math.random() * charset.length);\r",
																			"    password += charset[randomIndex];\r",
																			"  }\r",
																			"  return password;\r",
																			"}\r",
																			"\r",
																			"const name = generateRandomName()\r",
																			"const email = `${name}@email.com`\r",
																			"const psswd = generateRandomPassword(8)\r",
																			"\r",
																			"const getTaxAccessToken = {\r",
																			"    url: `${pm.collectionVariables.get(\"baseUrl\")}/players`,\r",
																			"  method: \"POST\",\r",
																			"  header: {\r",
																			"    'Content-Type': 'application/json'\r",
																			"  },\r",
																			"  body: {\r",
																			"    mode: 'raw',\r",
																			"    raw: JSON.stringify({\r",
																			"      name: name,\r",
																			"      email: email,\r",
																			"      password: psswd\r",
																			"    })\r",
																			"  }\r",
																			"};\r",
																			"\r",
																			"pm.sendRequest(getTaxAccessToken, function (err, response) {\r",
																			"  if (err) { \r",
																			"    console.error(err); \r",
																			"    return; \r",
																			"  }\r",
																			"    const id = response.json().playerId\r",
																			"\r",
																			"    pm.collectionVariables.set(\"id2\", `${id}`);\r",
																			"});"
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.expect(pm.response.code).to.equal(201);\r",
																			"});"
																		],
																		"type": "text/javascript",
																		"packages": {}
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "Bearer {{token1}}",
																		"type": "text"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/sessions/:sessionId/players/:fromPlayerId/invite/:toPlayerId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"sessions",
																		":sessionId",
																		"players",
																		":fromPlayerId",
																		"invite",
																		":toPlayerId"
																	],
																	"variable": [
																		{
																			"key": "sessionId",
																			"value": "{{sessionId}}",
																			"description": "(Required) "
																		},
																		{
																			"key": "fromPlayerId",
																			"value": "{{id1}}"
																		},
																		{
																			"key": "toPlayerId",
																			"value": "{{id2}}"
																		}
																	]
																}
															},
															"response": [
																{
																	"name": "Successfully sent invite",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"description": "Added as a part of security scheme: bearer",
																				"key": "Authorization",
																				"value": "Bearer <token>"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/sessions/:sessionId/players/:fromPlayerId/invite/:toPlayerId",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"sessions",
																				":sessionId",
																				"players",
																				":fromPlayerId",
																				"invite",
																				":toPlayerId"
																			],
																			"variable": [
																				{
																					"key": "sessionId"
																				},
																				{
																					"key": "fromPlayerId"
																				},
																				{
																					"key": "toPlayerId"
																				}
																			]
																		}
																	},
																	"status": "Created",
																	"code": 201,
																	"_postman_previewlanguage": "text",
																	"header": [],
																	"cookie": [],
																	"body": ""
																}
															]
														}
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Get the detailed information of a session",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is object with id, capacity, date, gameId, playersId, state and gameName properties\", function () {\r",
											"    var responseObject = pm.response.json();\r",
											"    pm.expect(responseObject).to.be.an('object');\r",
											"    pm.expect(responseObject).to.have.property('id');\r",
											"    pm.expect(responseObject).to.have.property('capacity');\r",
											"    pm.expect(responseObject).to.have.property('date');\r",
											"    pm.expect(responseObject).to.have.property('gameId');\r",
											"    pm.expect(responseObject).to.have.property('playersId');\r",
											"    pm.expect(responseObject).to.have.property('state');\r",
											"    pm.expect(responseObject).to.have.property('gameName');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token1}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sessions/:sessionId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sessions",
										":sessionId"
									],
									"variable": [
										{
											"key": "sessionId",
											"value": "{{sessionId}}",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Session details",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sessions/:sessionId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sessions",
												":sessionId"
											],
											"variable": [
												{
													"key": "sessionId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"sessionId\": \"<string>\",\n  \"capacity\": \"<integer>\",\n  \"gameId\": \"<string>\",\n  \"date\": \"<dateTime>\",\n  \"playerIds\": [\n    \"<integer>\",\n    \"<integer>\"\n  ],\n  \"state\": \"CLOSED\",\n  \"gameName\": \"<string>\"\n}"
								},
								{
									"name": "Session not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sessions/:sessionId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sessions",
												":sessionId"
											],
											"variable": [
												{
													"key": "sessionId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete an existing session",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/sessions/:sessionId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sessions",
										":sessionId"
									],
									"variable": [
										{
											"key": "sessionId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Session Deleted",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sessions/:sessionId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sessions",
												":sessionId"
											],
											"variable": [
												{
													"key": "sessionId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Session not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sessions/:sessionId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sessions",
												":sessionId"
											],
											"variable": [
												{
													"key": "sessionId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update an existing Session",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/sessions/:sessionId?capacity=&date=",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sessions",
										":sessionId"
									],
									"query": [
										{
											"key": "capacity",
											"value": ""
										},
										{
											"key": "date",
											"value": ""
										}
									],
									"variable": [
										{
											"key": "sessionId",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Session successfully updated",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sessions/:sessionId?capacity=&date=",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sessions",
												":sessionId"
											],
											"query": [
												{
													"key": "capacity",
													"value": ""
												},
												{
													"key": "date",
													"value": ""
												}
											],
											"variable": [
												{
													"key": "sessionId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Session not found",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sessions/:sessionId?capacity=&date=",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sessions",
												":sessionId"
											],
											"query": [
												{
													"key": "capacity",
													"value": ""
												},
												{
													"key": "date",
													"value": ""
												}
											],
											"variable": [
												{
													"key": "sessionId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Create a new session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an object with sessionId property\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON).to.be.an('object');\r",
									"    pm.expect(responseJSON.sessionId).to.exist;\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"sessionId\", `${pm.response.json().sessionId}`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token1}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"capacity\": \"10\",\n  \"gameName\": \"{{gameName}}\",\n  \"date\": \"2024-07-05T19:43:06Z\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/sessions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sessions"
							]
						}
					},
					"response": [
						{
							"name": "Session created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"capacity\": \"<integer>\",\n  \"gameName\": \"<string>\",\n  \"date\": \"<dateTime>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/sessions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sessions"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"sessionId\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Get a list of sessions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is object with data property with array of objects with id, capacity, data, gameId, playersId, state and gameName\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"    pm.expect(pm.response.json().data).to.be.an('array');\r",
									"    pm.response.json().data.forEach((item) => {\r",
									"     pm.expect(item).to.have.property('id');\r",
									"     pm.expect(item).to.have.property('capacity');\r",
									"     pm.expect(item).to.have.property('date');\r",
									"     pm.expect(item).to.have.property('gameId');\r",
									"     pm.expect(item).to.have.property('playersId');\r",
									"     pm.expect(item).to.have.property('state');\r",
									"     pm.expect(item).to.have.property('gameName');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token1}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/sessions?skip=0&limit=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sessions"
							],
							"query": [
								{
									"key": "gid",
									"value": "{{gameId}}",
									"disabled": true
								},
								{
									"key": "date",
									"value": "",
									"disabled": true
								},
								{
									"key": "state",
									"value": "",
									"disabled": true
								},
								{
									"key": "pid",
									"value": "",
									"disabled": true
								},
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": [
						{
							"name": "List of sessions",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sessions?gid=<string>&date=<dateTime>&state=open&pid=<integer>&limit=<integer>&skip=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sessions"
									],
									"query": [
										{
											"key": "gid",
											"value": "<string>"
										},
										{
											"key": "date",
											"value": "<dateTime>"
										},
										{
											"key": "state",
											"value": "open"
										},
										{
											"key": "pid",
											"value": "<integer>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": [\n    {\n      \"sessionId\": \"<string>\",\n      \"capacity\": \"<integer>\",\n      \"gameId\": \"<string>\",\n      \"date\": \"<dateTime>\",\n      \"playerIds\": [\n        \"<integer>\",\n        \"<integer>\"\n      ],\n      \"state\": \"OPEN\",\n      \"gameName\": \"<string>\"\n    },\n    {\n      \"sessionId\": \"<string>\",\n      \"capacity\": \"<integer>\",\n      \"gameId\": \"<string>\",\n      \"date\": \"<dateTime>\",\n      \"playerIds\": [\n        \"<integer>\",\n        \"<integer>\"\n      ],\n      \"state\": \"OPEN\",\n      \"gameName\": \"<string>\"\n    }\n  ]\n}"
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3030"
		},
		{
			"key": "email1",
			"value": "",
			"type": "string"
		},
		{
			"key": "psswd1",
			"value": "",
			"type": "string"
		},
		{
			"key": "name1",
			"value": "",
			"type": "string"
		},
		{
			"key": "email2",
			"value": "",
			"type": "string"
		},
		{
			"key": "psswd2",
			"value": "",
			"type": "string"
		},
		{
			"key": "name2",
			"value": "",
			"type": "string"
		},
		{
			"key": "id1",
			"value": "",
			"type": "string"
		},
		{
			"key": "id2",
			"value": "",
			"type": "string"
		},
		{
			"key": "token1",
			"value": ""
		},
		{
			"key": "gameName",
			"value": ""
		},
		{
			"key": "gameId",
			"value": ""
		},
		{
			"key": "sessionId",
			"value": ""
		}
	]
}